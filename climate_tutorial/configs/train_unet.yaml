seed_everything: 42

# ---------------------------- TRAINER -------------------------------------------
trainer:
  default_root_dir: ${oc.env:AMLT_OUTPUT_DIR,/mnt/climate_pretraining/outputs/vit}

  precision: 16

  gpus: null
  num_nodes: 1
  accelerator: gpu
  strategy: ddp_find_unused_parameters_false

  min_epochs: 1
  max_epochs: 20
  enable_progress_bar: true

  sync_batchnorm: True
  enable_checkpointing: True
  resume_from_checkpoint: null

  # debugging
  fast_dev_run: false

  logger:
    class_path: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    init_args:
      save_dir: ${trainer.default_root_dir}/logs
      name: parametric_3_history_4_layers_lat_crps
      version: null
      log_graph: False
      default_hp_metric: True
      prefix: ""

  callbacks:
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
      init_args:
        logging_interval: "step"

    - class_path: pytorch_lightning.callbacks.ModelCheckpoint
      init_args:
        dirpath: "${trainer.default_root_dir}/checkpoints/parametric_3_history_4_layers_lat_crps"
        # monitor: "val/w_rmse" # name of the logged metric which determines when model is improving
        # mode: "min" # "max" means higher metric value is better, can be also "min"
        # save_top_k: 1 # save k best models (determined by above metric)
        save_last: True # additionaly always save model from last epoch
        verbose: False
        filename: "epoch_{epoch:03d}"
        auto_insert_metric_name: False

    # - class_path: pytorch_lightning.callbacks.EarlyStopping
    #   init_args:
    #     monitor: "train/loss" # name of the logged metric which determines when model is improving
    #     mode: "min" # "max" means higher metric value is better, can be also "min"
    #     patience: 100 # how many validation epochs of not improving until training stops
    #     min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement

    - class_path: pytorch_lightning.callbacks.RichModelSummary
      init_args:
        max_depth: -1

    - class_path: pytorch_lightning.callbacks.RichProgressBar

# ---------------------------- MODEL -------------------------------------------
model:
  optimizer: "adam"
  lr: 0.0005
  weight_decay: 1e-5
  warmup_epochs: 5
  max_epochs: 30
  warmup_start_lr: 1e-8
  eta_min: 1e-8

  net:
    class_path: src.models.components.unet.Unet
    init_args:
      history: 3
      in_channels: 43  # geopotential and temperature have 7 pressure levels, other vars do not
      hidden_channels: 64
      out_channels: 3
      n_blocks: 4
      dropout: 0.1
      prob_type: "parametric"

# ---------------------------- DATA -------------------------------------------
data:
  root_dir: /datadrive/datasets/5.625deg
  inp_vars: [
      "geopotential",
      "temperature",
      "u_component_of_wind",
      "v_component_of_wind",
      "specific_humidity",
      "2m_temperature",
      "total_precipitation",
      "toa_incident_solar_radiation",
      "10m_u_component_of_wind",
      "10m_v_component_of_wind",
      "land_sea_mask",
      "orography",
      "lattitude"
    ]
  out_vars: ["geopotential_500", "temperature_850", "2m_temperature"]
  train_start_year: 1979
  val_start_year: 2015
  test_start_year: 2017
  end_year: 2018
  history: 3
  window: 6
  pred_range: 72 # 3 days
  subsample: 1
  batch_size: 128
  num_workers: 2
  pin_memory: False

